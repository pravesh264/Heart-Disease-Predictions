# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xMJddR_XLxfSLwAyhasdmjn_wqglJdZK
"""

# prompt: using stremlit

import streamlit as st
import pickle
import pandas as pd
import numpy as np

# Load the saved model
filename = 'finalized_model.sav'
loaded_model = pickle.load(open(filename, 'rb'))

# Create Streamlit app
st.title("Heart Disease Prediction")

# Input features
st.header("Enter Patient Details")

age = st.number_input("Age", min_value=0, max_value=120, value=50)
sex = st.selectbox("Sex", [0, 1])  # Assuming 0 for female, 1 for male
cp = st.selectbox("Chest Pain Type", [0, 1, 2, 3])
trestbps = st.number_input("Resting Blood Pressure", min_value=0, max_value=300, value=120)
chol = st.number_input("Serum Cholesterol", min_value=0, max_value=600, value=200)
fbs = st.selectbox("Fasting Blood Sugar", [0, 1])
restecg = st.selectbox("Resting Electrocardiographic Results", [0, 1, 2])
thalach = st.number_input("Maximum Heart Rate Achieved", min_value=0, max_value=300, value=150)
exang = st.selectbox("Exercise Induced Angina", [0, 1])
oldpeak = st.number_input("ST Depression Induced by Exercise", min_value=0.0, max_value=10.0, value=1.0)
slope = st.selectbox("Slope of the Peak Exercise ST Segment", [0, 1, 2])
ca = st.selectbox("Number of Major Vessels Colored by Fluoroscopy", [0, 1, 2, 3])
thal = st.selectbox("Thalassemia", [0, 1, 2])

# Create input DataFrame
input_data = pd.DataFrame({
    'age': [age], 'sex': [sex], 'cp': [cp], 'trestbps': [trestbps], 'chol': [chol],
    'fbs': [fbs], 'restecg': [restecg], 'thalach': [thalach], 'exang': [exang],
    'oldpeak': [oldpeak], 'slope': [slope], 'ca': [ca], 'thal': [thal]
})


# Preprocess the input data
input_data_encoded = pd.get_dummies(input_data, columns=['cp', 'restecg', 'thal'], drop_first=True)

# Ensure all columns are present for one-hot encoding consistency
for col in ['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2', 'thal_1', 'thal_2']:
  if col not in input_data_encoded.columns:
    input_data_encoded[col] = 0


#Convert features to integer
features_to_convert = ['sex', 'fbs', 'exang', 'slope', 'ca']
for feature in features_to_convert:
  input_data_encoded[feature] = input_data_encoded[feature].astype(int)


# Make prediction
prediction = loaded_model.predict(input_data_encoded)

# Display prediction
st.header("Prediction")
if prediction[0] == 1:
    st.write("The patient is likely to have heart disease.")
else:
    st.write("The patient is unlikely to have heart disease.")

